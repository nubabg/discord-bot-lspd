import os
import discord
from discord.ext import commands
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import time
import pytz
import json

# –í—Ä–µ–º–µ–≤–∞ –∑–æ–Ω–∞
sofia_tz = pytz.timezone("Europe/Sofia")

# ‚úÖ –í–∑–∏–º–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —Å—Ä–µ–¥–∞—Ç–∞ (Railway Variables)
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ùå –ì—Ä–µ—à–∫–∞: DISCORD_TOKEN –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω!")
    exit(1)

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ intents
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="/", intents=intents)

# –í—Ä—ä–∑–∫–∞ —Å Google Sheets
SHEET_NAME = "LSPD BOT"
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

credentials_content = os.getenv("CREDENTIALS_JSON")
if not credentials_content:
    print("‚ùå –ì—Ä–µ—à–∫–∞: CREDENTIALS_JSON –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω!")
    exit(1)

creds_dict = json.loads(credentials_content)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# ------------------ –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ ------------------

def ensure_structure(shifts_sheet, leaves_sheet):
    """–£–≤–µ—Ä—è–≤–∞ —Å–µ, —á–µ –∏–º–∞–º–µ –Ω—É–∂–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏/–∑–∞–≥–ª–∞–≤–∏—è –∏ –¥–æ–±–∞–≤—è UserID –∫–æ–ª–æ–Ω–∞ –ø—Ä–∏ –Ω—É–∂–¥–∞."""
    # Shifts
    values = shifts_sheet.get_all_values()
    if not values:
        shifts_sheet.append_row(["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "–ù–∞—á–∞–ª–æ", "–ö—Ä–∞–π", "–ò–∑—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—Ä–µ–º–µ", "UserID"])
    else:
        headers = values[0]
        # –ê–∫–æ –Ω—è–º–∞ –∫–æ–ª–æ–Ω–∞ UserID -> –¥–æ–±–∞–≤—è–º–µ —è –≤ –∫–æ–ª–æ–Ω–∞ E
        if "UserID" not in headers:
            # –ü–∏—à–µ–º "UserID" –Ω–∞ E1
            shifts_sheet.update("E1", [["UserID"]])
            # –ü–æ–ø—ä–ª–≤–∞–º–µ –ø—Ä–∞–∑–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Ä–µ–¥–æ–≤–µ (–∑–∞ –¥–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –∫–æ–ª–æ–Ω–∞—Ç–∞)
            if len(values) > 1:
                empty_col = [[""] for _ in range(len(values) - 1)]
                shifts_sheet.update(f"E2:E{len(values)}", empty_col)
        # –ê–∫–æ –∏–º–∞ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 4 –æ—Å–Ω–æ–≤–Ω–∏ –∫–æ–ª–æ–Ω–∏, –ø–æ–ø—Ä–∞–≤—è–º–µ –∑–∞–≥–ª–∞–≤–∏—è—Ç–∞
        base_headers = ["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "–ù–∞—á–∞–ª–æ", "–ö—Ä–∞–π", "–ò–∑—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—Ä–µ–º–µ"]
        need_update = False
        for i, name in enumerate(base_headers):
            if i >= len(headers) or headers[i] != name:
                need_update = True
        if need_update:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 4 –∑–∞–≥–ª–∞–≤–∏—è (–Ω–µ —Ç—Ä–∏—è –Ω–∏—â–æ, —Å–∞–º–æ —Ñ–∏–∫—Å–∏—Ä–∞–º —Ç–µ–∫—Å—Ç–æ–≤–µ—Ç–µ)
            for i, name in enumerate(base_headers, start=1):
                shifts_sheet.update_cell(1, i, name)

    # Leaves
    values_l = leaves_sheet.get_all_values()
    if not values_l:
        leaves_sheet.append_row(["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "–ù–∞—á–∞–ª–æ –Ω–∞ –æ—Ç–ø—É—Å–∫–∞", "–ö—Ä–∞–π –Ω–∞ –æ—Ç–ø—É—Å–∫–∞", "–û–±—â–æ –¥–Ω–∏", "–ü—Ä–∏—á–∏–Ω–∞"])

def get_display_names(interaction: discord.Interaction) -> tuple[str, str, str]:
    """
    –í—Ä—ä—â–∞:
      base_name -> –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ –∏–º–µ (global_name –∏–ª–∏ username)
      nickname  -> –Ω–∏–∫–Ω–µ–π–º –≤ —Å—ä—Ä–≤—ä—Ä–∞ (–∏–ª–∏ "")
      display   -> "base_name (nickname)" –∏–ª–∏ —Å–∞–º–æ base_name, –∞–∫–æ –Ω—è–º–∞ –Ω–∏–∫.
    """
    user = interaction.user
    base_name = getattr(user, "global_name", None) or user.name
    nickname = ""
    if interaction.guild:
        member = interaction.guild.get_member(user.id)
        if member and member.nick:
            nickname = member.nick

    display = f"{base_name} ({nickname})" if nickname else base_name
    return base_name, nickname, display

def now_str():
    return datetime.now(sofia_tz).strftime("%Y-%m-%d %H:%M:%S")

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ç–∞–±–ª–∏—Ü–∏—Ç–µ ------------------

try:
    shifts_sheet = client.open(SHEET_NAME).worksheet("Shifts")
    leaves_sheet = client.open(SHEET_NAME).worksheet("Leaves")
    ensure_structure(shifts_sheet, leaves_sheet)
    print("‚úÖ Google Sheets —Å–≤—ä—Ä–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å Google Sheets: {e}")
    exit(1)

# ------------------ –ö–æ–º–∞–Ω–¥–∏ ------------------

@bot.tree.command(name="startshift", description="–ó–∞–ø–æ—á–≤–∞ —Å–º—è–Ω–∞—Ç–∞ –∏ –∑–∞–ø–∏—Å–≤–∞ –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ –≤–ª–∏–∑–∞–Ω–µ")
async def startshift(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=False)
    except Exception as e:
        print(f"[STARTSHIFT] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ defer: {e}")
        return

    t0 = time.time()
    user_id = str(interaction.user.id)
    base_name, nickname, display = get_display_names(interaction)
    start_shift_time = now_str()
    print(f"[STARTSHIFT] {display} ({user_id}) @ {start_shift_time}")

    try:
        records = shifts_sheet.get_all_records()  # –∏–∑–∏—Å–∫–≤–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∏ –∑–∞–≥–ª–∞–≤–∏—è
        # 1) –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–º—è–Ω–∞ –ø–æ UserID
        active = None
        for i, row in enumerate(records, start=2):
            uid = str(row.get("UserID", "")).strip()
            end_val = row.get("–ö—Ä–∞–π")
            if uid == user_id and (end_val == "" or end_val is None):
                active = i
                break

        if active:
            await interaction.followup.send("‚ùå –í–µ—á–µ –∏–º–∞—à –∞–∫—Ç–∏–≤–Ω–∞ —Å–º—è–Ω–∞!", ephemeral=False)
            print(f"[STARTSHIFT] –ê–∫—Ç–∏–≤–Ω–∞ —Å–º—è–Ω–∞ (—Ä–µ–¥ {active}) –∑–∞ {user_id}. {time.time()-t0:.2f}s")
            return

        # 2) –ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ -> –¥–æ–±–∞–≤—è–º–µ —Ä–µ–¥
        # –§–æ—Ä–º–∞—Ç: ["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª", "–ù–∞—á–∞–ª–æ", "–ö—Ä–∞–π", "–ò–∑—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—Ä–µ–º–µ", "UserID"]
        shifts_sheet.append_row([display, start_shift_time, "", "", user_id])
        await interaction.followup.send(f"‚úÖ {display} –∑–∞–ø–æ—á–Ω–∞ —Å–º—è–Ω–∞—Ç–∞ –≤ {start_shift_time}", ephemeral=False)
        print(f"[STARTSHIFT] –ó–∞–ø–∏—Å–∞–Ω–æ. {time.time()-t0:.2f}s")
    except Exception as e:
        print(f"[STARTSHIFT] –ù–µ–æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        await interaction.followup.send("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ —Å–º—è–Ω–∞—Ç–∞!", ephemeral=False)

@bot.tree.command(name="endshift", description="–ü—Ä–∏–∫–ª—é—á–≤–∞ —Å–º—è–Ω–∞—Ç–∞ –∏ –∑–∞–ø–∏—Å–≤–∞ –≤—Ä–µ–º–µ—Ç–æ –Ω–∞ –∏–∑–ª–∏–∑–∞–Ω–µ")
async def endshift(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=False)
    except Exception as e:
        print(f"[ENDSHIFT] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ defer: {e}")
        return

    t0 = time.time()
    user_id = str(interaction.user.id)
    base_name, nickname, display = get_display_names(interaction)
    end_time = now_str()
    print(f"[ENDSHIFT] {display} ({user_id}) @ {end_time}")

    try:
        records = shifts_sheet.get_all_records()
        target_row_index = None
        start_time_str = None

        for i, row in enumerate(records, start=2):
            uid = str(row.get("UserID", "")).strip()
            end_val = row.get("–ö—Ä–∞–π")
            if uid == user_id and (end_val == "" or end_val is None):
                target_row_index = i
                start_time_str = row.get("–ù–∞—á–∞–ª–æ")
                break

        if not target_row_index:
            await interaction.followup.send("‚ùå –ù—è–º–∞ –∑–∞–ø–æ—á–Ω–∞—Ç–∞ —Å–º—è–Ω–∞ –∑–∞ –ø—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ!", ephemeral=False)
            print(f"[ENDSHIFT] –ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–º—è–Ω–∞ –∑–∞ {user_id}. {time.time()-t0:.2f}s")
            return

        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –∏–∑—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—Ä–µ–º–µ
        start_dt = datetime.strptime(start_time_str, "%Y-%m-%d %H:%M:%S")
        end_dt = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")
        worked_time = end_dt - start_dt
        hours, rem = divmod(worked_time.total_seconds(), 3600)
        minutes = int(rem // 60)
        worked_time_str = f"{int(hours)}—á {minutes}–º–∏–Ω"

        # –û–±–Ω–æ–≤—è–≤–∞–º–µ: C = –ö—Ä–∞–π, D = –ò–∑—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—Ä–µ–º–µ, A = –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª (—Å –Ω–æ–≤–∏—è –Ω–∏–∫), E = UserID (–∑–∞ –≤—Å–µ–∫–∏ —Å–ª—É—á–∞–π)
        updates = [
            {"range": f"A{target_row_index}", "values": [[display]]},
            {"range": f"C{target_row_index}", "values": [[end_time]]},
            {"range": f"D{target_row_index}", "values": [[worked_time_str]]},
            {"range": f"E{target_row_index}", "values": [[user_id]]},
        ]
        body = {"valueInputOption": "RAW", "data": [{"range": u["range"], "values": u["values"]} for u in updates]}
        shifts_sheet.spreadsheet.values_batch_update(body)

        await interaction.followup.send(
            f"‚úÖ {display} –ø—Ä–∏–∫–ª—é—á–∏ —Å–º—è–Ω–∞—Ç–∞ –≤ {end_time} (‚è≥ {worked_time_str})\n\n"
            "üíº **–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∏ –∑–∞ –¥–Ω–µ—à–Ω–∞—Ç–∞ –≤–∏ —Å–ª—É–∂–±–∞!**\n"
            "–ê–∫–æ –∏–º–∞—Ç–µ –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—Å—Ç–≤–æ, –º–æ–ª—è —Å–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ—Ç–æ –Ω–∞ LSPD.",
            ephemeral=False
        )
        print(f"[ENDSHIFT] –ì–æ—Ç–æ–≤–æ (—Ä–µ–¥ {target_row_index}). {time.time()-t0:.2f}s")

    except Exception as e:
        print(f"[ENDSHIFT] –ù–µ–æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        try:
            await interaction.followup.send("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Å–º—è–Ω–∞—Ç–∞!", ephemeral=False)
        except Exception as followup_error:
            print(f"[ENDSHIFT] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ followup: {followup_error}")

@bot.tree.command(name="leave", description="–ó–∞—è–≤–∫–∞ –∑–∞ –æ—Ç–ø—É—Å–∫ (–î–î.–ú–ú.–ì–ì–ì–ì)")
async def leave(interaction: discord.Interaction, start_date: str, end_date: str, reason: str):
    try:
        await interaction.response.defer(ephemeral=False)
    except Exception as e:
        print(f"[LEAVE] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ defer: {e}")
        return

    t0 = time.time()
    _, _, display = get_display_names(interaction)
    print(f"[LEAVE] {display}")

    try:
        start_dt = datetime.strptime(start_date, "%d.%m.%Y")
        end_dt = datetime.strptime(end_date, "%d.%m.%Y")
        total_days = (end_dt - start_dt).days + 1

        if total_days < 1:
            await interaction.followup.send("‚ùå –ì—Ä–µ—à–∫–∞: –ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ —Å–ª–µ–¥ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞!", ephemeral=False)
            return

        current_date = datetime.now(sofia_tz).replace(hour=0, minute=0, second=0, microsecond=0)
        min_allowed_date = current_date - timedelta(days=1)

        if start_dt < min_allowed_date:
            await interaction.followup.send(
                f"‚ùå –ù–µ –º–æ–∂–µ—à –¥–∞ –∑–∞—è–≤–∏—à –æ—Ç–ø—É—Å–∫, –∑–∞–ø–æ—á–≤–∞—â –ø—Ä–µ–¥–∏ {min_allowed_date.strftime('%d.%m.%Y')}! "
                "–ú–∞–∫—Å–∏–º—É–º 1 –¥–µ–Ω –Ω–∞–∑–∞–¥ –µ –ø–æ–∑–≤–æ–ª–µ–Ω.",
                ephemeral=False
            )
            return

        if not reason or reason.strip() == "":
            await interaction.followup.send("‚ùå –ú–æ–ª—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞ –æ—Ç–ø—É—Å–∫–∞!", ephemeral=False)
            return

        leaves_sheet.append_row([
            display,
            start_dt.strftime("%Y-%m-%d"),
            end_dt.strftime("%Y-%m-%d"),
            total_days,
            reason
        ])

        await interaction.followup.send(
            f"‚úÖ {display} –∑–∞—è–≤–∏ –æ—Ç–ø—É—Å–∫ –æ—Ç {start_date} –¥–æ {end_date} ({total_days} –¥–Ω–∏)\n"
            f"üìù **–ü—Ä–∏—á–∏–Ω–∞:** {reason}",
            ephemeral=False
        )
        print(f"[LEAVE] –ó–∞–ø–∏—Å–∞–Ω–æ. {time.time()-t0:.2f}s")

    except ValueError as ve:
        print(f"[LEAVE] ValueError: {ve}")
        await interaction.followup.send(
            "‚ùå –ì—Ä–µ—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –¥–∞—Ç–∏—Ç–µ! –ò–∑–ø–æ–ª–∑–≤–∞–π **–î–î.–ú–ú.–ì–ì–ì–ì** (–ø—Ä–∏–º–µ—Ä: 13.03.2025)",
            ephemeral=False
        )
    except Exception as e:
        print(f"[LEAVE] –ù–µ–æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        await interaction.followup.send("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤—è–≤–∞–Ω–µ –Ω–∞ –æ—Ç–ø—É—Å–∫!", ephemeral=False)

@bot.tree.command(name="report", description="–ì–µ–Ω–µ—Ä–∏—Ä–∞ –æ—Ç—á–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ—Ç–æ –≤—Ä–µ–º–µ")
async def report(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=False)
    except Exception as e:
        print(f"[REPORT] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ defer: {e}")
        return

    t0 = time.time()
    user_id = str(interaction.user.id)
    _, _, display = get_display_names(interaction)
    print(f"[REPORT] {display} ({user_id})")

    try:
        records = shifts_sheet.get_all_records()
        # –§–∏–ª—Ç—ä—Ä –ø–æ UserID –∑–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç
        user_records = [row for row in records if str(row.get("UserID", "")).strip() == user_id]
        if not user_records:
            await interaction.followup.send("‚ùå –ù—è–º–∞ –∑–∞–ø–∏—Å–∞–Ω–æ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ!", ephemeral=False)
            return

        report_text = f"üìã **–û—Ç—á–µ—Ç –∑–∞ {display}:**\n"
        for row in user_records:
            start = row.get("–ù–∞—á–∞–ª–æ", "‚ùì")
            end = row.get("–ö—Ä–∞–π", "‚ùì")
            worked_time = row.get("–ò–∑—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—Ä–µ–º–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            report_text += f"üìÖ {start} ‚ûù {end} ‚è≥ {worked_time}\n"

        await interaction.followup.send(report_text, ephemeral=False)
        print(f"[REPORT] –ì–æ—Ç–æ–≤–æ. {time.time()-t0:.2f}s")
    except Exception as e:
        print(f"[REPORT] –ì—Ä–µ—à–∫–∞: {e}")
        await interaction.followup.send("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç–∞!", ephemeral=False)

@bot.tree.command(name="documents", description="–ü–æ–∫–∞–∑–≤–∞ –≤–∞–∂–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑–∞ –ø–æ–ª–∏—Ü–∏—è—Ç–∞")
async def documents(interaction: discord.Interaction):
    doc_links = (
        "**üìú –í–∞–∂–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–∞ LSPD:**\n\n"
        "üìñ **–ù–∞–∫–∞–∑–∞—Ç–µ–ª–µ–Ω –∫–æ–¥–µ–∫—Å (Penal Code):**\n"
        "üîó https://docs.google.com/spreadsheets/d/1vyCQWnxKUPKknOsIpiXqU_-qC8vpLaHdDQIQu22hz2s/edit?gid=0#gid=0\n\n"
        "üìï **LSPD Handbook (–†—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ):**\n"
        "üîó https://docs.google.com/document/d/1eEsR6jwpk0Y38Yw7vr22BlB1w9HiI3qtib-uy_YkWck/edit?tab=t.aho3f2r2d6uw\n"
    )
    await interaction.response.send_message(doc_links, ephemeral=False)

# üî• –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
@bot.event
async def on_ready():
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ –ë–æ—Ç—ä—Ç –µ –æ–Ω–ª–∞–π–Ω! –õ–æ–≥–Ω–∞—Ç –∫–∞—Ç–æ {bot.user}")
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ –∫–æ–º–∞–Ω–¥–∏: {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {e}")

bot.run(TOKEN)
